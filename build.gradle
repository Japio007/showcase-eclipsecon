import aQute.bnd.build.Workspace
logging.captureStandardOutput LogLevel.INFO

defaultTasks 'clean', 'bndbuild'

buildscript {
    dependencies {
        classpath files('cnf/plugins/biz.aQute.bnd/biz.aQute.bnd-2.2.0.jar')
    }
}

task generatesettings << {
    def f = new File('.')
    def bndProjects = []
    f.eachFile { 
        if(new File(it, 'bnd.bnd').exists()) {
            bndProjects << it.name
        } 
    }

    def settingsFile = new File('settings.gradle')
    settingsFile.text = 'include '

    bndProjects.eachWithIndex { item,idx ->
        if(idx > 0) {
            settingsFile << ', '
        }

        settingsFile << "'$item'"
    }
}

task release() << {
    delete "release"

    ant.taskdef(name: 'bndrelease', classname: 'aQute.bnd.ant.RunconfigToDistributionTask', classpath: 'cnf/plugins/biz.aQute.bnd/biz.aQute.bnd-2.2.0.jar')
    ant.bndrelease(allowsnapshots: true, bndfile: 'run/webshop.bndrun', rootdir: './', outputdir: 'release')   
    delete fileTree(dir: 'build/release', includes: ['*.test'])
}

task prepareObrRelease(dependsOn: release) << {
    delete "obrrelease"
    new File('obrrelease').mkdirs()
}

task obrRelease(type: Copy, dependsOn: release) {
    def tree = fileTree('.') {
        include '**/generated/*.jar'
        exclude '**/*.test'
    }
    
    from tree.files into 'release'
    
}

Workspace workspace
def parentDir = project.projectDir
    
workspace = Workspace.getWorkspace(parentDir)

subprojects { p ->
    apply plugin: 'java'

    repositories {
       mavenCentral()
    }
    
    configurations {
    jdt
}

dependencies {
    jdt "org.eclipse.jdt.core.compiler:ecj:4.2.2"
}

compileJava {
    options.compiler = "org.eclipse.jdt.core.JDTCompilerAdapter"
    doFirst {
        ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader
        configurations.jdt.each { File f ->
            antClassLoader.addURL(f.toURI().toURL())
        }
    }
}

    aQute.bnd.build.Project bndProject
    bndProject = workspace.getProject(p.projectDir)
    
    sourceSets.main.java.srcDirs = ['src']
    sourceSets.main.resources.srcDirs = ['src']
    sourceSets.test.java.srcDirs = ['test']
    sourceSets.test.resources.srcDirs = ['test']    
    sourceSets.main.output.classesDir = 'bin'
    sourceSets.main.output.resourcesDir = 'bin'
    sourceSets.test.output.classesDir = 'bin_test'
    sourceSets.test.output.resourcesDir = 'bin_test'

    bndProject.getDependson().each {
        compileJava.dependsOn(':' +  it.name + ':bndbuild')
    }

    bndProject.getBuildpath().each {
        dependencies.add('compile', files(it.getFile()))
    }

    dependencies.add('testCompile', 'junit:junit:4.+')

    task bndbuild << { task ->
    
        if(!new File(p.projectDir, 'bin').exists()) {
            mkdir('bin')
        }


        bndProject.build()
        bndProject.getWarnings().each {
            logger.warn it
        }

        bndProject.getErrors().each {
            logger.error it
        }
        if(bndProject.getErrors()) {
            throw new  GradleException("Bnd build failure. Check build logs for error messages")
        }
    }

    bndbuild.dependsOn(['compileJava','processResources'])

    task bndtest << { task -> 
        bndProject.test();
    }

    clean.doLast {
        p.file('generated').deleteDir()
    }
}

